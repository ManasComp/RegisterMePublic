// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegisterMe.Infrastructure.Data;

#nullable disable

namespace DAL.Migrations.SqlServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241111101352_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatDayToGroupsJoinTable", b =>
                {
                    b.Property<int>("CatDaysId")
                        .HasColumnType("int");

                    b.Property<string>("GroupsGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CatDaysId", "GroupsGroupId");

                    b.HasIndex("GroupsGroupId");

                    b.ToTable("CatDayToGroupsJoinTable");
                });

            modelBuilder.Entity("ExhibitionDayPriceJoinTable", b =>
                {
                    b.Property<int>("ExhibitionDayId")
                        .HasColumnType("int");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("ExhibitionDayId", "PriceId");

                    b.HasIndex("PriceId");

                    b.ToTable("ExhibitionDayPriceJoinTable");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PriceToGroupsJoinTable", b =>
                {
                    b.Property<string>("GroupsGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PricesId")
                        .HasColumnType("int");

                    b.HasKey("GroupsGroupId", "PricesId");

                    b.HasIndex("PricesId");

                    b.ToTable("PriceToGroupsJoinTable");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Amounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("PaymentInfoId")
                        .IsUnique()
                        .HasFilter("[PaymentInfoId] IS NOT NULL");

                    b.HasIndex("PriceId");

                    b.ToTable("Amounts");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Breeder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BreederIsSameAsExhibitor")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExhibitedCatId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LitterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitedCatId")
                        .IsUnique()
                        .HasFilter("[ExhibitedCatId] IS NOT NULL");

                    b.HasIndex("LitterId")
                        .IsUnique()
                        .HasFilter("[LitterId] IS NOT NULL");

                    b.ToTable("Breeders");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.CatDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatRegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitionDayId")
                        .HasColumnType("int");

                    b.Property<int?>("ExhibitorsCage")
                        .HasColumnType("int");

                    b.Property<int?>("RentedCageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatRegistrationId");

                    b.HasIndex("ExhibitionDayId");

                    b.HasIndex("ExhibitorsCage");

                    b.HasIndex("RentedCageTypeId");

                    b.ToTable("CatDays");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.CatRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationToExhibitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationToExhibitionId");

                    b.ToTable("CatRegistrations");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ExhibitedCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatRegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Neutered")
                        .HasColumnType("bit");

                    b.Property<string>("PedigreeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("TitleAfterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBeforeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatRegistrationId")
                        .IsUnique();

                    b.ToTable("ExhibitedCats", (string)null);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeleteNotFinishedRegistrationsAfterHours")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("RegistrationEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("RegistrationStart")
                        .HasColumnType("date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ExhibitionDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("ExhibitionDays");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Exhibitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPartOfCsch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfFife")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId")
                        .IsUnique();

                    b.ToTable("Exhibitors");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Group", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Litter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatRegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("NameOfBreedingStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassOfOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatRegistrationId")
                        .IsUnique();

                    b.ToTable("Litters", (string)null);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExhibitedCatIsFatherOfId")
                        .HasColumnType("int");

                    b.Property<int?>("ExhibitedCatIsMotherOfId")
                        .HasColumnType("int");

                    b.Property<int?>("LitterIsFatherOfId")
                        .HasColumnType("int");

                    b.Property<int?>("LitterIsMotherOfId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PedigreeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleAfterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBeforeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitedCatIsFatherOfId")
                        .IsUnique()
                        .HasFilter("[ExhibitedCatIsFatherOfId] IS NOT NULL");

                    b.HasIndex("ExhibitedCatIsMotherOfId")
                        .IsUnique()
                        .HasFilter("[ExhibitedCatIsMotherOfId] IS NOT NULL");

                    b.HasIndex("LitterIsFatherOfId")
                        .IsUnique()
                        .HasFilter("[LitterIsFatherOfId] IS NOT NULL");

                    b.HasIndex("LitterIsMotherOfId")
                        .IsUnique()
                        .HasFilter("[LitterIsMotherOfId] IS NOT NULL");

                    b.ToTable("Parents", (string)null);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PaymentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("PaymentCompletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PaymentRequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationToExhibitionId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationToExhibitionId")
                        .IsUnique();

                    b.ToTable("PaymentInfos");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PersonCage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationToExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationToExhibitionId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PersonRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailToOrganization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPartOfCsch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartOfFife")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationToExhibitionId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationToExhibitionId")
                        .IsUnique();

                    b.ToTable("PersonRegistrations");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RegistrationToExhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastNotificationSendOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("ExhibitorId");

                    b.HasIndex("ExhibitionId", "ExhibitorId")
                        .IsUnique();

                    b.ToTable("RegistrationsToExhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RentedCage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RentedCages");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RentedTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CageId")
                        .HasColumnType("int");

                    b.Property<int>("RentedType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.ToTable("RentedTypes");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.PriceAdjustmentWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("PriceAdjustmentWorkflows");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.PriceTypeWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId")
                        .IsUnique();

                    b.ToTable("PriceTypeWorkflows");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.RulesEngineRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceAdjustmentWorkflowId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceTypeWorkflowId")
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("int");

                    b.Property<int?>("RuleIDFK")
                        .HasColumnType("int");

                    b.Property<string>("RuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuccessEvent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PriceAdjustmentWorkflowId");

                    b.HasIndex("PriceTypeWorkflowId");

                    b.HasIndex("RuleIDFK");

                    b.ToTable("RulesEngineRules", (string)null);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.RulesEngineScopedParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceAdjustmentWorkflowId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceTypeWorkflowId")
                        .HasColumnType("int");

                    b.Property<int?>("RulesEngineRuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriceAdjustmentWorkflowId");

                    b.HasIndex("PriceTypeWorkflowId");

                    b.HasIndex("RulesEngineRuleId");

                    b.ToTable("RulesEngineScopedParams", (string)null);
                });

            modelBuilder.Entity("RentedCageAndExhibitionDayJoinTable", b =>
                {
                    b.Property<int>("CagesForRentId")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitionDaysId")
                        .HasColumnType("int");

                    b.HasKey("CagesForRentId", "ExhibitionDaysId");

                    b.HasIndex("ExhibitionDaysId");

                    b.ToTable("RentedCageAndExhibitionDayJoinTable");
                });

            modelBuilder.Entity("CatDayToGroupsJoinTable", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.CatDay", null)
                        .WithMany()
                        .HasForeignKey("CatDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExhibitionDayPriceJoinTable", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ExhibitionDay", null)
                        .WithMany()
                        .HasForeignKey("ExhibitionDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.Price", null)
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceToGroupsJoinTable", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.Price", null)
                        .WithMany()
                        .HasForeignKey("PricesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Address", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Exhibition", "Exhibition")
                        .WithOne("Address")
                        .HasForeignKey("RegisterMe.Domain.Entities.Address", "ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Advertisement", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany("Advertisements")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Amounts", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Advertisement", "Advertisement")
                        .WithMany("Amounts")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RegisterMe.Domain.Entities.PaymentInfo", "PaymentInfo")
                        .WithOne("Amounts")
                        .HasForeignKey("RegisterMe.Domain.Entities.Amounts", "PaymentInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RegisterMe.Domain.Entities.Price", "Price")
                        .WithMany("Amounts")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advertisement");

                    b.Navigation("PaymentInfo");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Organization", "OrganizationUserIsAdminIn")
                        .WithMany("Administrator")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OrganizationUserIsAdminIn");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Breeder", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ExhibitedCat", "ExhibitedCat")
                        .WithOne("Breeder")
                        .HasForeignKey("RegisterMe.Domain.Entities.Breeder", "ExhibitedCatId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RegisterMe.Domain.Entities.Litter", "Litter")
                        .WithOne("Breeder")
                        .HasForeignKey("RegisterMe.Domain.Entities.Breeder", "LitterId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ExhibitedCat");

                    b.Navigation("Litter");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.CatDay", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.CatRegistration", "CatRegistration")
                        .WithMany("CatDays")
                        .HasForeignKey("CatRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.ExhibitionDay", "ExhibitionDay")
                        .WithMany("CatDays")
                        .HasForeignKey("ExhibitionDayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.PersonCage", "Cage")
                        .WithMany("CatDays")
                        .HasForeignKey("ExhibitorsCage")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegisterMe.Domain.Entities.RentedTypeEntity", "RentedTypeEntity")
                        .WithMany("CatDays")
                        .HasForeignKey("RentedCageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cage");

                    b.Navigation("CatRegistration");

                    b.Navigation("ExhibitionDay");

                    b.Navigation("RentedTypeEntity");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.CatRegistration", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RegistrationToExhibition", "RegistrationToExhibition")
                        .WithMany("CatRegistrations")
                        .HasForeignKey("RegistrationToExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationToExhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ExhibitedCat", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.CatRegistration", "CatRegistration")
                        .WithOne("ExhibitedCat")
                        .HasForeignKey("RegisterMe.Domain.Entities.ExhibitedCat", "CatRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatRegistration");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Exhibition", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Organization", "Organization")
                        .WithMany("Exhibitions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ExhibitionDay", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany("Days")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Exhibitor", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ApplicationUser", "AspNetUser")
                        .WithOne("Exhibitor")
                        .HasForeignKey("RegisterMe.Domain.Entities.Exhibitor", "AspNetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Litter", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.CatRegistration", "CatRegistration")
                        .WithOne("Litter")
                        .HasForeignKey("RegisterMe.Domain.Entities.Litter", "CatRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatRegistration");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Parent", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.ExhibitedCat", null)
                        .WithOne("Father")
                        .HasForeignKey("RegisterMe.Domain.Entities.Parent", "ExhibitedCatIsFatherOfId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RegisterMe.Domain.Entities.ExhibitedCat", null)
                        .WithOne("Mother")
                        .HasForeignKey("RegisterMe.Domain.Entities.Parent", "ExhibitedCatIsMotherOfId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RegisterMe.Domain.Entities.Litter", null)
                        .WithOne("Father")
                        .HasForeignKey("RegisterMe.Domain.Entities.Parent", "LitterIsFatherOfId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RegisterMe.Domain.Entities.Litter", null)
                        .WithOne("Mother")
                        .HasForeignKey("RegisterMe.Domain.Entities.Parent", "LitterIsMotherOfId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PaymentInfo", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RegistrationToExhibition", "RegistrationToExhibition")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("RegisterMe.Domain.Entities.PaymentInfo", "RegistrationToExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationToExhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PersonCage", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RegistrationToExhibition", "RegistrationToExhibition")
                        .WithMany("Cages")
                        .HasForeignKey("RegistrationToExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationToExhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PersonRegistration", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RegistrationToExhibition", "RegistrationToExhibition")
                        .WithOne("PersonRegistration")
                        .HasForeignKey("RegisterMe.Domain.Entities.PersonRegistration", "RegistrationToExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationToExhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RegistrationToExhibition", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Advertisement", "Advertisement")
                        .WithMany("PersonRegistrations")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany("RegistrationsToExhibitions")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.Exhibitor", "Exhibitor")
                        .WithMany("RegistrationToExhibitions")
                        .HasForeignKey("ExhibitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Exhibition");

                    b.Navigation("Exhibitor");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RentedTypeEntity", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RentedCage", "RentedCage")
                        .WithMany("RentedTypes")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentedCage");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.PriceAdjustmentWorkflow", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany("Workflows")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.PriceTypeWorkflow", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.Exhibition", "Exhibition")
                        .WithOne("PaymentTypesWorkflow")
                        .HasForeignKey("RegisterMe.Domain.Entities.RulesEngine.PriceTypeWorkflow", "ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.RulesEngineRule", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RulesEngine.PriceAdjustmentWorkflow", null)
                        .WithMany("Rules")
                        .HasForeignKey("PriceAdjustmentWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RegisterMe.Domain.Entities.RulesEngine.PriceTypeWorkflow", null)
                        .WithMany("Rules")
                        .HasForeignKey("PriceTypeWorkflowId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RegisterMe.Domain.Entities.RulesEngine.RulesEngineRule", null)
                        .WithMany("Rules")
                        .HasForeignKey("RuleIDFK")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.RulesEngineScopedParam", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RulesEngine.PriceAdjustmentWorkflow", null)
                        .WithMany("GlobalParams")
                        .HasForeignKey("PriceAdjustmentWorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegisterMe.Domain.Entities.RulesEngine.PriceTypeWorkflow", null)
                        .WithMany("GlobalParams")
                        .HasForeignKey("PriceTypeWorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RegisterMe.Domain.Entities.RulesEngine.RulesEngineRule", null)
                        .WithMany("LocalParams")
                        .HasForeignKey("RulesEngineRuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RentedCageAndExhibitionDayJoinTable", b =>
                {
                    b.HasOne("RegisterMe.Domain.Entities.RentedCage", null)
                        .WithMany()
                        .HasForeignKey("CagesForRentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegisterMe.Domain.Entities.ExhibitionDay", null)
                        .WithMany()
                        .HasForeignKey("ExhibitionDaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Advertisement", b =>
                {
                    b.Navigation("Amounts");

                    b.Navigation("PersonRegistrations");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Exhibitor");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.CatRegistration", b =>
                {
                    b.Navigation("CatDays");

                    b.Navigation("ExhibitedCat");

                    b.Navigation("Litter");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ExhibitedCat", b =>
                {
                    b.Navigation("Breeder");

                    b.Navigation("Father");

                    b.Navigation("Mother");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Exhibition", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Advertisements");

                    b.Navigation("Days");

                    b.Navigation("PaymentTypesWorkflow")
                        .IsRequired();

                    b.Navigation("RegistrationsToExhibitions");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.ExhibitionDay", b =>
                {
                    b.Navigation("CatDays");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Exhibitor", b =>
                {
                    b.Navigation("RegistrationToExhibitions");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Litter", b =>
                {
                    b.Navigation("Breeder")
                        .IsRequired();

                    b.Navigation("Father")
                        .IsRequired();

                    b.Navigation("Mother")
                        .IsRequired();
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Exhibitions");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PaymentInfo", b =>
                {
                    b.Navigation("Amounts")
                        .IsRequired();
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.PersonCage", b =>
                {
                    b.Navigation("CatDays");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.Price", b =>
                {
                    b.Navigation("Amounts");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RegistrationToExhibition", b =>
                {
                    b.Navigation("Cages");

                    b.Navigation("CatRegistrations");

                    b.Navigation("PaymentInfo");

                    b.Navigation("PersonRegistration")
                        .IsRequired();
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RentedCage", b =>
                {
                    b.Navigation("RentedTypes");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RentedTypeEntity", b =>
                {
                    b.Navigation("CatDays");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.PriceAdjustmentWorkflow", b =>
                {
                    b.Navigation("GlobalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.PriceTypeWorkflow", b =>
                {
                    b.Navigation("GlobalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("RegisterMe.Domain.Entities.RulesEngine.RulesEngineRule", b =>
                {
                    b.Navigation("LocalParams");

                    b.Navigation("Rules");
                });
#pragma warning restore 612, 618
        }
    }
}
